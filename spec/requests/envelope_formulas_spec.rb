require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/envelope_formulas", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # EnvelopeFormula. As you add validations to EnvelopeFormula, be sure to
  # adjust the attributes here as well.
  let!(:user) { create(:user) }

  let(:valid_attributes) {
    attributes_for(:envelope_formula).merge(user_id: user.id)
  }

  let(:invalid_attributes) {
    attributes_for(:envelope_formula, :invalid).merge(user_id: user.id)
  }

  before do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      EnvelopeFormula.create! valid_attributes
      get envelope_formulas_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      envelope_formula = EnvelopeFormula.create! valid_attributes
      get envelope_formula_url(envelope_formula)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_envelope_formula_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      envelope_formula = EnvelopeFormula.create! valid_attributes
      get edit_envelope_formula_url(envelope_formula)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new EnvelopeFormula" do
        expect {
          post envelope_formulas_url, params: { envelope_formula: valid_attributes }
        }.to change(EnvelopeFormula, :count).by(1)
      end

      it "redirects to the created envelope_formula" do
        post envelope_formulas_url, params: { envelope_formula: valid_attributes }
        expect(response).to redirect_to(envelope_formula_url(EnvelopeFormula.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new EnvelopeFormula" do
        expect {
          post envelope_formulas_url, params: { envelope_formula: invalid_attributes }
        }.to change(EnvelopeFormula, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post envelope_formulas_url, params: { envelope_formula: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { name: 'new name' } }

      it "updates the requested envelope_formula" do
        envelope_formula = EnvelopeFormula.create! valid_attributes

        expect do
          patch envelope_formula_url(envelope_formula), params: { envelope_formula: new_attributes }

          envelope_formula.reload
        end.to change(envelope_formula, :name)
      end

      it "redirects to the envelope_formula" do
        envelope_formula = EnvelopeFormula.create! valid_attributes
        patch envelope_formula_url(envelope_formula), params: { envelope_formula: new_attributes }
        envelope_formula.reload
        expect(response).to redirect_to(envelope_formula_url(envelope_formula))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        envelope_formula = EnvelopeFormula.create! valid_attributes
        patch envelope_formula_url(envelope_formula), params: { envelope_formula: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested envelope_formula" do
      envelope_formula = EnvelopeFormula.create! valid_attributes
      expect {
        delete envelope_formula_url(envelope_formula)
      }.to change(EnvelopeFormula, :count).by(-1)
    end

    it "redirects to the envelope_formulas list" do
      envelope_formula = EnvelopeFormula.create! valid_attributes
      delete envelope_formula_url(envelope_formula)
      expect(response).to redirect_to(envelope_formulas_url)
    end
  end
end
