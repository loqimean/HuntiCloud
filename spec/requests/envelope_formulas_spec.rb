require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe EnvelopeFormulasController, type: :request do

  # This should return the minimal set of attributes required to create a valid
  # EnvelopeFormula. As you add validations to EnvelopeFormula, be sure to
  # adjust the attributes here as well.
  context 'when user logged in' do
    include_context :login_user

    let(:valid_attributes) do
      attributes_for(:envelope_formula).merge(user_id: user.id)
    end

    let(:invalid_attributes) do
      attributes_for(:envelope_formula, :invalid).merge(user_id: user.id)
    end

    describe "GET /index" do
      subject do
        get envelope_formulas_url
      end

      context 'with records' do
        let!(:envelope_formula) { create(:envelope_formula) }

        it "renders a successful response" do
          subject

          expect(response).to be_successful
          expect(response).to render_template(:index)
        end
      end

      context 'without records' do
        it "renders a successful response" do
          subject

          expect(response).to be_successful
          expect(response).to render_template(:index)
        end
      end
    end

    describe "GET /new" do
      it "renders a successful response" do
        get new_envelope_formula_url, headers: { 'Turbo-Frame': :new }

        expect(response).to be_successful
        expect(response).to render_template(:new)
      end
    end

    describe "GET /edit" do
      let!(:envelope_formula) { create(:envelope_formula) }

      it "renders a successful response" do
        get edit_envelope_formula_url(envelope_formula), headers: { 'Turbo-Frame': :new }

        expect(response).to be_successful
        expect(response).to render_template(:edit)
      end
    end

    describe "POST /create" do
      subject do
        post envelope_formulas_url, params: { envelope_formula: params }
      end

      context "with valid parameters" do
        let(:params) do
          attributes_for(:envelope_formula).merge(user_id: user.id)
        end

        it "creates a new EnvelopeFormula" do
          expect {
            subject
          }.to change(EnvelopeFormula, :count).by(1)

          expect(response).to be_successful
          expect(response).to render_template(:_envelope_formula)
        end
      end

      context "with invalid parameters" do
        let(:params) do
          attributes_for(:envelope_formula, :invalid).merge(user_id: user.id)
        end

        it "does not create a new EnvelopeFormula" do
          expect do
            subject
          end.to change(EnvelopeFormula, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          subject

          expect(response).to be_unprocessable
        end

        it { is_expected.to render_template(:new) }
      end
    end

    describe "PATCH /update" do
      let!(:envelope_formula) { create(:envelope_formula) }

      subject do
        patch envelope_formula_url(envelope_formula), params: { envelope_formula: params }

        envelope_formula.reload
      end

      context "with valid parameters" do
        let(:params) { { name: 'new name' } }

        it "updates the requested envelope_formula" do
          expect do
            subject
          end.to change(envelope_formula, :name)

          expect(response).to be_successful
        end

        it { is_expected.to render_template(:_envelope_formula) }
      end

      context "with invalid parameters" do
        let(:params) { { name: '' } }

        it do
          subject

          expect(response).to be_unprocessable
          expect(response).to render_template(:edit)
        end
      end
    end

    describe "DELETE /destroy" do
      let!(:envelope_formula) { create(:envelope_formula) }

      it "destroys the requested envelope_formula" do
        expect {
          delete envelope_formula_url(envelope_formula)
        }.to change(EnvelopeFormula, :count).by(-1)

        expect(response).to be_successful
      end
    end
  end
end
